pragma solidity ^0.5.7;

import '../OwnerCore/Ownable.sol';
import '../RoleModel/ConsumerRole.sol';
import '../RoleModel/DistributorRole.sol';
import '../RoleModel/FarmerRole.sol';
import '../RoleModel/RetailerRole.sol';


// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ConsumerRole, DistributorRole, FarmerRole, RetailerRole {

  // Define 'owner'
  address payable owner;

  // Define a variable called 'UPC' for Universal Product Code (UPC)
  uint  UPC;

  // Define a variable called 'SKU' for Stock Keeping Unit (SKU)
  uint  SKU;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that tracks its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State {
    Collected, // 0
    Tested, // 1
    Packed, // 2
    ForSale, // 3
    Sold, // 4
    Transported, // 5
    Received, // 6
    Purchased // 7
  }

  State constant defaultState = State.Collected;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint SKU;  // Stock Keeping Unit (SKU)
    uint UPC; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string originFarmName; // Farmer Name
    string originFarmInformation;  // Farmer Information
    string originFarmLatitude; // Farm Latitude
    string originFarmLongitude;  // Farm Longitude
    uint productID;  // Product ID potentially a combination of UPC + SKU
    string productNotes; // Product Notes
    uint productPrice; // Product Price
    State itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'UPC' as input argument
  event Collected(uint UPC);
  event Tested(uint UPC);
  event Packed(uint UPC);
  event ForSale(uint UPC);
  event Sold(uint UPC);
  event Transported(uint UPC);
  event Received(uint UPC);
  event Purchased(uint UPC);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "Could not verify the caller.");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "The amount paid is not sufficient to cover the price.");
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _UPC) {
    _;
    uint _price = items[_UPC].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_UPC].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a UPC is collected
  modifier collected(uint _UPC) {
    require(items[_UPC].itemState == State.Collected, "Item is not in the 'Collected' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Tested
  modifier tested(uint _UPC) {
    require(items[_UPC].itemState == State.Tested, "Item is not in the 'Tested' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Packed
  modifier packed(uint _UPC) {
    require(items[_UPC].itemState == State.Packed, "Item is not in the 'Packed' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is ForSale
  modifier forSale(uint _UPC) {
    require(items[_UPC].itemState == State.ForSale, "Item is not in the 'For Sale' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Sold
  modifier sold(uint _UPC) {
    require(items[_UPC].itemState == State.Sold, "Item is not in the 'Sold' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Transported
  modifier transported(uint _UPC) {
    require(items[_UPC].itemState == State.Transported, "Item is not in the 'Transported' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Received
  modifier received(uint _UPC) {
    require(items[_UPC].itemState == State.Received, "Item is not in the 'Received' State.");
    _;
  }

  // Define a modifier that checks if an item.state of a UPC is Purchased
  modifier purchased(uint _UPC) {
    require(items[_UPC].itemState == State.Purchased, "Item is not in the 'Purchased' State.");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'SKU' to 1
  // and set 'UPC' to 1
  constructor() public payable {
    owner = msg.sender;
    SKU = 1;
    UPC = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'CollectItem' that allows a farmer to mark an item 'collected'
  function collectItem (
    uint _UPC,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes)
    public
    onlyFarmer
  {
      // Add the new item as part of Collect
      items[_UPC].SKU = SKU;
      items[_UPC].UPC = UPC;
      items[_UPC].ownerID = _originFarmerID;
      items[_UPC].originFarmerID = _originFarmerID;
      items[_UPC].originFarmName = _originFarmName;
      items[_UPC].originFarmInformation = _originFarmInformation;
      items[_UPC].originFarmLatitude = _originFarmLatitude;
      items[_UPC].originFarmLongitude = _originFarmLongitude;
      items[_UPC].productID = _UPC + SKU;
      items[_UPC].productNotes = _productNotes;
      items[_UPC].itemState = State.Collected;
      // Increment SKU
      SKU = SKU + 1;
      // Emit the appropriate event
      emit Collected(_UPC);
  }

  // Define a function 'testtItem' that allows a farmer to mark an item 'Tested'
  function testItem(uint _UPC) public
    // Call modifier to check if UPC has passed previous supply chain stage
    collected(_UPC)
    // Call modifier to verify caller of this function
    verifyCaller(items[_UPC].ownerID)
    onlyFarmer
  {
    // Update the appropriate fields
    items[_UPC].itemState = State.Tested;
    // Emit the appropriate event
    emit Tested(_UPC);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _UPC) public
    // Call modifier to check if UPC has passed previous supply chain stage
    tested(_UPC)
    // Call modifier to verify caller of this function
    verifyCaller(items[_UPC].ownerID)
    onlyFarmer
  {
    // Update the appropriate fields
    items[_UPC].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_UPC);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _UPC, uint _price) public
    // Call modifier to check if UPC has passed previous supply chain stage
    packed(_UPC)
    // Call modifier to verify caller of this function
    verifyCaller(items[_UPC].ownerID)
    onlyFarmer
  {
    // Update the appropriate fields
    items[_UPC].productPrice = _price;
    items[_UPC].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_UPC);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _UPC) public payable
    // Call modifier to check if UPC has passed previous supply chain stage
    forSale(_UPC)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_UPC].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_UPC)
    onlyDistributor
  {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_UPC].ownerID = msg.sender;
    items[_UPC].distributorID = msg.sender;
    items[_UPC].itemState = State.Sold;
    // Transfer money to farmer
    msg.sender.transfer(items[_UPC].productPrice);
    // emit the appropriate event
    emit Sold(_UPC);
  }

  // Define a function 'transportItem' that allows the distributor to mark an item 'Transported'
  // Use the above modifers to check if the item is sold
  function transportItem(uint _UPC) public
    // Call modifier to check if UPC has passed previous supply chain stage
    sold(_UPC)
    // Call modifier to verify caller of this function
    verifyCaller(items[_UPC].ownerID)
    onlyDistributor
  {
    // Update the appropriate fields
    items[_UPC].itemState = State.Transported;
    // Emit the appropriate event
    emit Transported(_UPC);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is transported
  function receiveItem(uint _UPC) public
    // Call modifier to check if UPC has passed previous supply chain stage
    transported(_UPC)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer
  {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_UPC].ownerID = msg.sender;
    items[_UPC].retailerID = msg.sender;
    items[_UPC].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_UPC);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _UPC) public
    // Call modifier to check if UPC has passed previous supply chain stage
    received(_UPC)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_UPC].ownerID = msg.sender;
    items[_UPC].consumerID = msg.sender;
    items[_UPC].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_UPC);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _UPC) public view returns (
    uint itemSKU,
    uint itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
  )
  {
  // Assign values to the 8 parameters
    itemSKU = items[_UPC].SKU;
    itemUPC = items[_UPC].UPC;
    ownerID = items[_UPC].ownerID;
    originFarmerID = items[_UPC].originFarmerID;
    originFarmName = items[_UPC].originFarmName;
    originFarmInformation = items[_UPC].originFarmInformation;
    originFarmLatitude = items[_UPC].originFarmLatitude;
    originFarmLongitude = items[_UPC].originFarmLongitude;
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _UPC) public view returns (
    uint itemSKU,
    uint itemUPC,
    uint productID,
    string memory productNotes,
    uint productPrice,
    uint itemState,
    address distributorID,
    address retailerID,
    address consumerID
  )
  {
    // Assign values to the 9 parameters
    itemSKU = items[_UPC].SKU;
    itemUPC = items[_UPC].UPC;
    productID = items[_UPC].productID;
    productNotes = items[_UPC].productNotes;
    productPrice = items[_UPC].productPrice;
    itemState = uint(items[_UPC].itemState);
    distributorID = items[_UPC].distributorID;
    retailerID = items[_UPC].retailerID;
    consumerID = items[_UPC].consumerID;
  }
}
